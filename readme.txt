- Se puede utilizar cualquier compilador de c++ estandar que sea reciente para linux o para windows, (desconozco si funciona en Mac OS, pero en teoria si deberia funcionar), en particular use el compilador g++ 7.4.0 incorporado en Cygwin (un emulador del ambiente linux en windows).
- En la prueba se implemento un arbol general para manejar el sistema de archivos
- A dicho arbol se le agrego un diccion tipo map para mejorar la complejidad de busqueda de los elementos del arbol que pasa de O(n) a O(logn) gracias al uso del arbol ordenado, cabe destacar que si se utiliza una estructura diccionario implementado con tablas hash la complejidad en promedio podria ser incluso mejor ps estas estructuras tienen un tiempo promedio de O(1).
- Cada Nodo del arbol corresponde a un objeto de la clase File, y esta puede ser un archivo o un directorio.
- Cada archivo tiene asociado una lista de versiones
- Dicha lista de versiones inicialmente me la arme como una lista simple ordenada por fecha creciente, esto permitia ser eficiente al insertar y en los busquedas (usando busqueda binaria aprovechando el hecho de estar ordenadas), sin embargo al momento de borrar una version la complejidad era de O(N) donde N era el numero de versiones. Para evitar esto se implemento una estructura tipo diccionario map en donde la eliminacion pasa a ser O(logn), sin embargo esto tambien afecta ahora a la inserccion puesto que aumenta la complejidad de O(1) a O(logn), la decision sobre que estructura utilizar depende en gran medida en el uso que se le de a la estructura, si la estrutura va a tener muchas inserciones y pocas eliminaciones es mas conveniente la lista, pero si se toman en cuenta las eliminaciones entonces es mas conveniente el map, para efectos de esta prueba decidi dejar el map para evitar llegar a una alta complejidad O(n) y asi todas las operaciones se mantendrian en O(logn)
- Basicamente todas las funciones se basan en buscar el archivo en el arbol, y luego realizar la operaciones correspondiente.
- Para las operaciones de busqueda en versiones se utiliza las propiedades del map para hacer uso de las funciones lower_bound y upper_bound para buscar rapidamente rangos.
- Para el manejo de las fechas se uso la libreria time de c++, personalmente me parece algo engorroso pero hice uso de ella para mantener el codigo c++ totalmente estandar sin dependencias externas ni de ningun sistema operativo en particular.
- Se implemento un archivo main para realizar pruebas de la estructura de datos, en la cual se insertan algunos archivos y directorios y luego se consultan o eliminan.
- Hay que tener en cuenta que cuando se buscar una version en una fecha, se buscara la fecha mas cercana que sea menor o igual a la fecha buscada.
